'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.popWithChildCss=exports.getChildSelector=exports.createCssWithChild=void 0;const regCss_1=require('..\\..\\regCss');const createCssWithChild=(strChildSelector,css)=>`& ${strChildSelector} {
  ${css}
}\n`;exports.createCssWithChild=createCssWithChild;const regSpaceInAttr=/(\[[^\[\]\s]*)\s+/g;const removeSpaceInAttr=str=>{while(str.search(regSpaceInAttr)!==-1){str=str.replace(regSpaceInAttr,'$1');}return str;};const multipleSpaceTo1Space=str=>str.replace(/ {2,}/g,' ');const regNoSpaceCombinator=RegExp(`(\\S)([${regCss_1.sregCombinator}])`);const addSpaceForProximityCombinator=str=>str.replace(regNoSpaceCombinator,'$1 $2 ');const getChildSelector=strObjCssSelectorKey=>{let str=strObjCssSelectorKey;str=removeSpaceInAttr(str);str=addSpaceForProximityCombinator(str);str=multipleSpaceTo1Space(str);if(str.indexOf(' ')!==-1){return str.substr(str.indexOf(' ')+1);}return'';};exports.getChildSelector=getChildSelector;const popWithChildCss=({strSingleSelector,objCss})=>{const arrCss=[];const regInside=RegExp(`${strSingleSelector}${regCss_1.sregWithChild}`);Object.keys(objCss).forEach(strEachSelector=>{if(strEachSelector.search(regInside)!==-1){const strChildSelector=exports.getChildSelector(strEachSelector);const css=objCss[strEachSelector].join('\n');const cssWithChild=exports.createCssWithChild(strChildSelector,css);arrCss.push(cssWithChild);}});return arrCss.join('');};exports.popWithChildCss=popWithChildCss;exports.default=exports.popWithChildCss;