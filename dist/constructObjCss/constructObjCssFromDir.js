'use strict';var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});const fs_1=__importDefault(require('fs'));const path_1=__importDefault(require('path'));const constructObjCssPerFile_1=__importDefault(require('./constructObjCssPerFile'));const excludeDir=file=>['node_modules','@types','.scannerwork','.git','coverage'].indexOf(file)!==-1;const readFile=file=>{const read=fs_1.default.readFileSync(file);return read.toString();};const populateObjCssFromDir=(pathIn,objCssAll={combined:{},single:{},withchild:{},pseudo:{},beginNonSingle:{},mediaq:{}})=>{const files=fs_1.default.readdirSync(pathIn);console.log('#############################');console.log('process directory = ',pathIn);files.forEach(file=>{const fromPath=path_1.default.join(pathIn,file);const stat=fs_1.default.statSync(fromPath);if(stat.isFile()){if(file.search(/\.css$/)!==-1){const str=readFile(path_1.default.resolve(pathIn,file));objCssAll=constructObjCssPerFile_1.default(str,objCssAll);}}else if(stat.isDirectory()){if(!excludeDir(file)){objCssAll=populateObjCssFromDir(path_1.default.resolve(pathIn,file),objCssAll);}}});return objCssAll;};exports.default=populateObjCssFromDir;