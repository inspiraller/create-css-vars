'use strict';var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});const popCombinedCss_1=__importDefault(require('../../popCss/popCombinedCss'));const crop_1=__importDefault(require('../../util/crop'));const clearCssComents_1=__importDefault(require('../../util/clearCssComents'));describe('popCombinedCss',()=>{describe('success',()=>{it('should construct 1 combined',()=>{const strCombinedSelector='.link,.x';const objCss={[strCombinedSelector]:['color: red;']};const strSingleSelector='.link';const actual=clearCssComents_1.default(popCombinedCss_1.default({strSingleSelector,objCss}),'\xAC');const expected=`
        color: red;
      `;expect(crop_1.default(actual)).toBe(crop_1.default(expected));});it('should construct 2 combined',()=>{const strCombinedSelector1='.link,.x';const strCombinedSelector2='.y,#item,.link';const objCss={[strCombinedSelector1]:['color: red;'],[strCombinedSelector2]:['color: blue;']};const strSingleSelector='.link';const actual=clearCssComents_1.default(popCombinedCss_1.default({strSingleSelector,objCss}),'\xAC');const expected=`
        color: red;
        color: blue;
      `;expect(crop_1.default(actual)).toBe(crop_1.default(expected));});describe('fail',()=>{it('should NOT construct combined - with non matching selector',()=>{const objCss={'.somethingx, .link21':['color: red;']};expect(popCombinedCss_1.default({strSingleSelector:'.link',objCss})).toBe('');});});});});