'use strict';var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});const execConstructObjCss_1=__importDefault(require('../../constructObjCss/execConstructObjCss'));const constructAnyObjCss_1=__importDefault(require('../../constructObjCss/constructAnyObjCss'));const regCss_1=require('../../util/regCss');const _utils_1=require('../_utils');const replaceRelative_1=require('../../util/replaceRelative');const varCssInput='color: var(--lg);';const varCssOutput='color: ${getTheme(\'--lg\')};';const assetCssInput1='background-image: url("./internal/file.svg");';const assetCssInput2='background-image: url(\'./internal/file.svg\');';const assetCssOutput1='background-image: url("${getAsset(\'./internal/file.svg\')}");';const assetCssOutput2='background-image: url(\'${getAsset(\'./internal/file.svg\')}\');';describe('execConstructObjCss - all ',()=>{describe('replaceTheme()',()=>{it('should replace vars with getTheme',()=>{const strCss=varCssInput;const expected=varCssOutput;expect(replaceRelative_1.replaceRelativeTheme(strCss)).toEqual(expected);});});describe('replaceRelativeAssets()',()=>{it('should replace assets with assets path',()=>{const expected=assetCssOutput1;let strCss=assetCssInput1;strCss=replaceRelative_1.replaceRelativeAssetsApos(strCss);strCss=replaceRelative_1.replaceRelativeAssetsQuot(strCss);expect(strCss).toEqual(expected);});it('should replace assets with assets path',()=>{let strCss=assetCssInput2;const expected=assetCssOutput2;strCss=replaceRelative_1.replaceRelativeAssetsApos(strCss);strCss=replaceRelative_1.replaceRelativeAssetsQuot(strCss);expect(strCss).toEqual(expected);});});describe('execConstructObjCss()',()=>{describe('success',()=>{it('should match - basic example - 2 single selectors',()=>{const arrSelectors=['.elem1','.elem2'];const strSelector1=arrSelectors[0];const strSelector2=arrSelectors[1];const strCss1=`position: absolute;`;const strCss2=`position: fixed;`;const str=`
          ${strSelector1} {
            ${strCss1}
          }
          ${strSelector2} {
            ${strCss2}
          }
        `;const objCss={};const reg=regCss_1.regSingle;const constructCssObj=constructAnyObjCss_1.default;const actual=execConstructObjCss_1.default({objCss,str,reg,constructCssObj});const expected={[strSelector1]:[strCss1],[strSelector2]:[strCss2]};expect(_utils_1.cropObjCss(actual)).toEqual(expected);});it('should match - and replace vars with method ',()=>{const arrSelectors=['.elem1'];const strSelector1=arrSelectors[0];const strCss1=varCssInput;const str=`
          ${strSelector1} {
            ${strCss1}
          }
        `;const objCss={};const reg=regCss_1.regSingle;const constructCssObj=constructAnyObjCss_1.default;const actual=execConstructObjCss_1.default({objCss,str,reg,constructCssObj});const expected={[strSelector1]:[varCssOutput]};expect(_utils_1.cropObjCss(actual)).toEqual(expected);});it('should match - and replace background image path with assets path ',()=>{const arrSelectors=['.elem1'];const strSelector1=arrSelectors[0];const strCss1=assetCssInput1;const str=`
          ${strSelector1} {
            ${strCss1}
          }
        `;const objCss={};const reg=regCss_1.regSingle;const constructCssObj=constructAnyObjCss_1.default;const actual=execConstructObjCss_1.default({objCss,str,reg,constructCssObj});const expected={[strSelector1]:[assetCssOutput1]};expect(_utils_1.cropObjCss(actual)).toEqual(expected);});});});});